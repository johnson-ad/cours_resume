
# Afficher les images

docker images


# Afficher les container plus detailer

docker container ls

# Afficher toutes les containers 

docker ps -a

# Demarer un container

docker run -d nom_image:tag_image
ex : docker run -d nginx:latest 
     NB : -d : permet de faire d'execute d'autre commde en meme temps container
               tourne, sans -d se terminal sera bloque temp ke le container est lancer 

#  Changer le port d'un container 

docker run -d -p notre_port:port_fornis_par_container nom_image:tag_image
ex: docker run -d -p 3000:80 nginx:latest // le server nginx sera lancer sur le ports 3000 
                                                      

# Lancer le container sur plusieur port 

  docker run -d -p 3000:80 -p 8080:80 nginx:latest // le server nginx sera lancer sur les
                                                      ports 3000 et le port 8080

# Prendre la main dans un container

docker run -ti(permet de prendre la main dans le container une fois cleui -ci est demarer)
ex: docker run -ti --name c1 -d debian:latest //une fois demarer on peut lutiliser comme si on utilisait debian 
                                                faire des apt update ou apt install git par exemple

# Arreter un container

1- docker ps ( pour avoir touts les container et leur id ou nom )
2- docker stop id_container ou nom_container

# Supprimer un container 

1-docker ps -a ( avoir touts active ou pas )
2-docker rm id_container //supprime le container

# Supprimer plusieur container 

1-docker ps -aq ( avoir tout les id des contianer )
2-docker rm $( docker ps -aq ) // supprime tout

# Changer le nom d'une image 

docker run --name taper_new_name -d -p 3000:80 -p 8080:80 nginx:latest
ex: docker run --name website -d -p 3000:80 -p 8080:80 nginx:latest // le nom est changer en website
    -> docker ps ( pour verifier )

# Formater l'affichage (cela permet d'avoir un affichage bien formater)

docker ps --format="ID\t{{.ID}}\nNAME\t{{.Names}}\nImage\t{{.Image}}\nPORTS\t{{.Ports}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.CreatedAt}}\nSTATUS\t{{.Status}}\n"

-> Creer une variable pour stocker le format
      export FORMAT="ID\t{{.ID}}\nNAME\t{{.Names}}\nImage\t{{.Image}}\nPORTS\t{{.Ports}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.CreatedAt}}\nSTATUS\t{{.Status}}\n"

-> Utilisation du variable
      ex: docker ps --format=$FORMAT

# Volume (garde en memoire notre passage)

docker run --name website -v $(chemain_absolut_fichier):chemain_fournie_par_container_surLeur_site -d -p 3000:80 -p 8080:80 nginx:latest
ex: docker run --name website -v $(pwd[si macOS ou linux]) -d -p 3000:80 -p 8080:80 nginix:latest
    
     docker run --name website -v $(pwd):/usr/share/nginx/html:ro -d -p 3000:80 -p 8080:80 nginx:latest

1- Rentrer(comme on rentre dans un repertoire) dans un container
 docker exec -it website bash

2- root@fa2cf5ob07b:/# ls -al    // affiche tout le contenu du repertoire

3-root@fa2cf5ob07b:/# cd /usr/share/nginx/html //aller dans le repertoire fournie sur le site website

4-root@fa2cf5ob07b:/# ls -al //on vera notre fichier ki etait sur notre machine dans ce repertoire

5-root@fa2cf5ob07b:/# exit  // pour quitter du repertoire


# Partage des volumes entre 2 ou plusieur container

1-docker run --help //pour avoir toutes les commande docker
  --volumes-from nom_container(a partage)

2- docker run --name website -d -p 8080:80 nginx:latest //container A
   docker run --name website_copy --volumes-from website -d -p 8081:80 nginix:latest //container B contient tout ce i est dans A


# Dockerfile (c'est comme package.json)

dans 1 projet, par exemple ns c'est la creation de site, dans le doc website on creee le fichier Dockerfile
(lire la doc Dockerfile)
//Dockerfile permet de cree des images a partir des data ki se trouve dans le Dockerfile

1-Creer le fichier Dockerfile
2-Dans le fichier ecrire:
   FROM nginx:latest 
   ADD . /usr/share/nginx/html (le . veux dire tout le contenu)
   //on va lancer le build du Dockerfile, il va cree un volume avec l'image nginx et
    ajout tout le contenu de notre doc website dans le container nginx.
    En gros il fait comme l'etape de volume

# Creer une image a partir de Dockerfile

docker build --help // pour avoir toutes les commandes

1-docker build --tag name_image:tag_image
  ex: docker build --tag website:latest . (le . indique l'emplacement) //va cree une image volume
      
      docker images ls // on vera notre img website
      docker run --name website -d -p 3000:80 nginx:latest

## Exemple de configuration de Dockerfile(avec node js)

FROM node:10.16.1-alpine
WORKDIR /app   ->// verifi si doc app exist tu fais sinon tu le cree
ADD package*.json  //empeche la reinstalations de tout les package a chaque on build(va juste ajouter les modifications faites) 
RUN npm install
ADD . .    ->//ajout toutes le contenu du doc website dans le doc app
CMD node index.js //une foiis le build fini lance node index.js





















